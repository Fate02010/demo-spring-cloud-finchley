server:
  # 项目端口号
  port: 11200
  # Undertow 服务器优化
  undertow:
    # 设置 IO 线程数，它主要执行非阻塞的任务，
    # 它们会负责多个连接，默认设置每个 CPU 核心有一个线程。
    # 不要设置过大，如果过大，启动项日会报错：打开文件数过多
    io-threads: 12
    # 阳塞任务线程数，当执行类似 Servlet 请求阻塞 IO 操作，
    # Undertow 会从这个线程池中取得线程。它的值设置取决于系统线程执行任务的阻塞系数，
    # 默认值：IO 线程数 * 8
    worker-threads: 96
    # 是否分配直接内存（NIO 直接分配的是堆外内存）
    direct-buffers: true
    # 每块 buffer 的空间大小，空间越小利用越充分，
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: 1024

spring:
  application:
    # Spring Boot 项目实例名称
    name: demo-goods
  boot:
    admin:
      client:
        # 基于 Spring Boot 项目的监控地址
        url: 'http://localhost:1700'

### 日志配置
logback:
  spring:
    level: INFO
  project:
    level: INFO

### 端点控制
management:
  endpoints:
    web:
      exposure:
        # 开启指定端点、所有端点
        include: '*'
  endpoint:
    health:
      # 总是表示详细信息的显示
      show-details: always

### 注册中心配置
eureka:
  instance:
    # 主机名
    hostname: localhost
    # 使用 ip 注册到注册中心实例化
    prefer-ip-address: true
  client:
    secure-port-enabled: true
    ssl:
      key-store: EurekaClient.p12
      key-store-password: 123456
    security:
      user:
        name: eureka-server
        password: 8e9lx7LuP3436gfsg
    # Spring Cloud Eureka 注册中心地址
    service-url:
      defaultZone: https://${eureka.client.security.user.name}:${eureka.client.security.user.password}@${eureka.instance.hostname}:8761/eureka/
    # 针对新服务上线, Eureka client获取不及时的问题，在测试环境，可以适当提高Client端拉取Server注册信息的频率，默认：30秒
    registry-fetch-interval-seconds: 30

### Feign 配置
feign:
  compression:
    request:
      # 开启请求压缩
      enabled: true
      # 配置压缩的 MIME TYPE
      mime-types: text/xml,application/xml,application/json
      # 配置压缩数据大小的下限
      min-request-size: 2048
    response:
      # 开启响应压缩
      enabled: true
  # 是否开启断路器（熔断器）
  hystrix:
    enabled: true
  httpclient:
    # 是否开启 Http Client
    enabled: false
  #    # 最大连接数，默认：200
  #    max-connections: 200
  #    # 最大路由，默认：50
  #    max-connections-per-route: 50
  #    # 连接超时，默认：2000/毫秒
  #    connection-timeout: 2000
  #    # 生存时间，默认：900L
  ##    time-to-live: 900
  #    # 响应超时的时间单位，默认：TimeUnit.SECONDS
  ##    timeToLiveUnit: SECONDS
  okhttp:
    enabled: true

### Feign Logger Level 配置
logging:
  level:
    com.lynchj.demogoods.feign.OrderFeign: debug

### Ribbon 配置
ribbon:
  # http建立socket超时时间,毫秒
  ConnectTimeout: 2000
  # http读取响应socket超时时间
  ReadTimeout: 8000
  # 同一台实例最大重试次数,不包括首次调用
  MaxAutoRetries: 0
  # 重试负载均衡其他的实例最大重试次数,不包括首次server
  MaxAutoRetriesNextServer: 0
  # 是否所有操作都重试，POST请求注意多次提交错误。
  # 默认false，设定为false的话，只有get请求会重试
  OkToRetryOnAllOperations: true
  # 饥饿加载
  eager-load:
    # 是否开启饥饿加载
    enabled: true
    # 饥饿加载的服务
    clients: demo-order,demo-product
  # Eureka 配置
#  eureka:
#    # 禁止使用 Eureka 获取负载服务列表
#    enabled: false

### 针对单个服务的 Ribbon 配置
demo-order:
  ribbon:
    # 基于配置文件形式的 针对单个服务的 Ribbon 负载均衡策略
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
    # http建立socket超时时间,毫秒
    ConnectTimeout: 2000
    # http读取响应socket超时时间
    ReadTimeout: 5000
    # 同一台实例最大重试次数,不包括首次调用
    MaxAutoRetries: 0
    # 重试负载均衡其他的实例最大重试次数,不包括首次server
    MaxAutoRetriesNextServer: 2
    # 是否所有操作都重试，POST请求注意多次提交错误。
    # 默认false，设定为false的话，只有get请求会重试
    OkToRetryOnAllOperations: true
    # 手动指定 Ribbon 服务列表
#    listOfServers: http://localhost:11200,http://localhost:11201

### Hystrix 配置
hystrix:
  # 这样将会自动配置一个 Hystrix 并发策略插件的 hook，这个 hook 会将 SecurityContext 从主线程传输到 Hystrix 的命令。
  # 因为 Hystrix 不允许注册多个 Hystrix 策略，所以可以声明 HystrixConcurrencyStrategy
  # 为一个 Spring bean 来实现扩展。Spring Cloud 会在 Spring 的上下文中查找你的实现，并将其包装在自己的插件中。
  shareSecurityContext: true
  command:
    default:
      # 断路器配置
      circuitBreaker:
        # 当在配置时间窗口内达到此数量的失败后，进行断路。默认：20个
        requestVolumeThreshold: 20
        # 出错百分比阈值，当达到此阈值后，开始断路。默认：50%
        errorThresholdpercentage: 50
        # 触发短路的时间值，当该值设为5000时，则当触发 circuit break 后的5000毫秒内都会拒绝request
        # 也就是5000毫秒后才会关闭circuit。默认：5000
        sleepWindowInMilliseconds: 5000
        # 强制打开断路器，如果打开这个开关，那么拒绝所有request，默认false
        forceOpen: false
        # 强制关闭断路器 如果这个开关打开，circuit将一直关闭且忽略，默认false
        forceClosed: false
      execution:
        # 熔断器配置
        isolation:
          # 隔离策略，线程池隔离机制，如果不配置，默认配置：THREAD
          strategy: THREAD
          thread:
            # 熔断器超时时间，默认：1000/毫秒
            timeoutInMilliseconds: 18000
            # 超时时是否立马中断
            interruptOnTimeout: true
          semaphore:
            # 信号量请求数，当设置为信号量隔离策略时，设置最大允许的请求数
            maxConcurrentRequests: 10
  #        timeout:
  #          # 禁用熔断器超时时间，不推荐
  #          enabled: false
  threadpool:
    defalut:
      # 当使用线程隔离策略时，线程池的核心大小
      coreSize: 20
      # 当 Hystrix 隔离策略为线程池隔离模式时，最大线程池大小的配置，在 `1.5.9` 版本中还需要配置 `allowMaximumSizeToDivergeFromCoreSize` 为 true
      maximumSize: 30
      # 此属性语序配置的 maximumSize 生效
      allowMaximumSizeToDivergeFromCoreSize: true